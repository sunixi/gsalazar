<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"   
	alpha=".9"
    headerHeight="0"
    borderThickness="0"
    backgroundColor="0x990000"
    dropShadowEnabled="true"
    borderColor="0x003399"
    borderStyle="solid"
    color="0x990000"
    cornerRadius="20"
    currentState="minimizadoHorizontal"
    creationComplete="onCreationComplete();"
>
    <mx:Metadata>
        /** Evento ejecutado para poder minimizar el panel horizontalmente mediante transiciones y estados del objeto contenedor. */
        [Event(name="minimizeHorizontalSlide", type="flash.events.Event")]
        /** Evento ejecutado para poder maximizar el panel horizontalmente mediante transiciones y estados del objeto contenedor. */
        [Event(name="maximizeHorizontalSlide", type="flash.events.Event")]
        /** Evento ejecutado para poder minimizar el panel verticalmente mediante transiciones y estados del objeto contenedor. */
        [Event(name="minimizeVerticalSlide", type="flash.events.Event")]
        /** Evento ejecutado para poder maximizar el panel verticalmente mediante transiciones y estados del objeto contenedor. */
        [Event(name="maximizeVerticalSlide", type="flash.events.Event")]
        /** Evento ejecutado al finalizar el cambio del estado maximizado. */
        [Event(name="currentStateHorizontalChangingFinish", type="flash.events.Event")]
        /** Evento ejecutado al comenzar el cambio del estado minimizado. */
        [Event(name="currentStateHorizontalChangingBegin", type="flash.events.Event")]
        /** Evento ejecutado al finalizar el cambio del estado maximizado. */
        [Event(name="currentStateVerticalChangingFinish", type="flash.events.Event")]
        /** Evento ejecutado al comenzar el cambio del estado minimizado. */
        [Event(name="currentStateVerticalChangingBegin", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
    	import mx.controls.Alert;
    	import mx.events.ResizeEvent;
        import mx.containers.HBox;
        import mx.states.AddChild;
        import mx.states.State;
        import mx.core.UIComponent;
        import mx.collections.IList;
        import mx.collections.ArrayCollection;
        import mx.managers.ToolTipManager;

        [Bindable]
        public var bodyText:String = "";
       
        [Bindable]
        public var listData:IList;
       
        [Bindable]
        public var minimizeClass:Class;
        [Bindable]
        [Inspectable(category="General", type="String", defaultValue="horizontal", enumeration="horizontal,vertical")]
        public var minimizeStrategy:String = "horizontal";
       
        [Bindable]
        private var uiMinimizeComponent:UIComponent;
       
        /** Minimizado es el estado actual del componente. Al hacer un click en el encabezado este se maximiza. */
        [Bindable]
        private var minimizeHorizontal:Boolean = true;

        /** Minimizado verticalmente es cuando se achica completamente de manera vertical si posibilidad de ver ningun contenido. */
        [Bindable]
        private var minimizeVertical:Boolean = false;
 
        private function onCreationComplete():void {
            this.initializeMinimizeState();
            this.addEventListener("currentStateHorizontalChangingBegin", onCurrentStateHorizontalChangingBegin);
            this.addEventListener("currentStateHorizontalChangingFinish", onCurrentStateHorizontalChangingFinish);
            this.addEventListener("currentStateVerticalChangingBegin", onCurrentStateVerticalChangingBegin);
            this.addEventListener("currentStateVerticalChangingFinish", onCurrentStateVerticalChangingFinish);
            this.addEventListener(ResizeEvent.RESIZE, onResizePanelDescriptorSlider);
        }
       
		private function onResizePanelDescriptorSlider(event:ResizeEvent):void {
			var thisPanel:PanelDescriptionSlider = PanelDescriptionSlider(event.target);

			if(	this.isResizedHorizontalMaximize(event, thisPanel) || 
				this.isResizedHorizontalMinimize(event, thisPanel)){

				if(this.isResizedHorizontalMaximize(event, thisPanel)){

				} else {

				}
			} 
			if(	this.isResizedVerticalMaximize(event, thisPanel) || 
				this.isResizedVerticalMinimize(event, thisPanel)){
					
				if(this.isResizedVerticalMaximize(event, thisPanel)){
					if(uiMinimizeComponent != null){
						uiMinimizeComponent.percentHeight = 100;
					}
				} else {
					if(uiMinimizeComponent != null){
						uiMinimizeComponent.height = 0;
					}
				}
			}
		}
		
		private function isResizedVerticalMinimize(event:ResizeEvent, thisPanel:PanelDescriptionSlider):Boolean {
			return event.oldHeight > thisPanel.height;
		}

		private function isResizedVerticalMaximize(event:ResizeEvent, thisPanel:PanelDescriptionSlider):Boolean {
			return event.oldHeight < thisPanel.height;
		}
		
		private function isResizedHorizontalMinimize(event:ResizeEvent, thisPanel:PanelDescriptionSlider):Boolean {
			return event.oldWidth > thisPanel.width;
		}

		private function isResizedHorizontalMaximize(event:ResizeEvent, thisPanel:PanelDescriptionSlider):Boolean {
			return event.oldWidth < thisPanel.width;
		}
       
        private function initializeMinimizeState():void {
            if(minimizeClass != null){
                var uiComponent:UIComponent = UIComponent(new ClassFactory(minimizeClass).newInstance());
                var minimizeState:State = this.getState('minimizadoHorizontal');
                uiComponent.height = minimizadoContainter.height - 5;
                uiComponent.width = minimizadoContainter.width - 5;
                uiMinimizeComponent = uiComponent;
                minimizadoContainter.addChild(uiComponent);
            }
        }
       
        private function getState(stateName:String):State {
            for each(var s:State in super.states){
                if(s.name.toUpperCase() == stateName.toUpperCase()){
                    return s;
                }
            }
            return null;
        }
       
        private function maximizeHorizontalPanel():void {
            minimizeHorizontal = false;
            dispatchEvent(new Event("maximizeHorizontalSlide"));
        }
       
        private function minimizeHorizontalPanel():void {
            minimizeHorizontal = true;
            dispatchEvent(new Event("minimizeHorizontalSlide"));
        }
       
        private function minimizeVerticalPanel():void {
            minimizeVertical = true;
            dispatchEvent(new Event("minimizeVerticalSlide"));
        }
       
        private function maximizeVerticalPanel():void {
            minimizeVertical = false;
            dispatchEvent(new Event("maximizeVerticalSlide"));
        }
       
        /**
         * Miminiza el panel solamente si no esta minimizado. Esto se verifica ya que si no se ejecutarÃ­an las transiciones, y
         * no es la idea.
         *
         */
        public function doHorizontalMinimize():void {
            if(!this.minimizeHorizontal){
                this.minimizeHorizontalPanel();
            }
        }
       
        public function doVerticalMinimize():void {
            if(!this.minimizeVertical){
                this.minimizeVerticalPanel();
            }
        }
       
        /**
         * Realiza un resize HORIZONTALMENTE del panel dependiendo si el panel esta maximizado, o minimizado.
         * En caso de estas minimizado, lo maximiza, y en caso de estar maximizado, lo minimiza.
         *
         */
        private function doHorizontalResizePanel():void {
            if(this.minimizeStrategy == "horizontal"){
                if(minimizeHorizontal){
                    this.maximizeHorizontalPanel();
                } else {
                    this.minimizeHorizontalPanel();
                }
            } else {
                if(minimizeVertical){
                    this.maximizeVerticalPanel();
                } else {
                    this.minimizeVerticalPanel();
                }
            }
        }
       
        private function onCurrentStateVerticalChangingBegin(event:Event):void{
            if(this.minimizeVertical){
                super.currentState = 'minimizadoVertical';
            } else {
                super.currentState = 'maximizadoVertical';
            }
        }
       
        private function onCurrentStateVerticalChangingFinish(event:Event):void{
            if(this.minimizeVertical){
                super.currentState = 'minimizadoVertical';
            } else {
                super.currentState = 'maximizadoVertical';
            }
        }
       
        private function onCurrentStateHorizontalChangingBegin(event:Event):void{
            if(this.minimizeHorizontal){
                super.currentState = 'minimizadoHorizontal';
            } else {
                super.currentState = 'maximizadoHorizontal';
            }
        }
       
        private function onCurrentStateHorizontalChangingFinish(event:Event):void{
            if(this.minimizeHorizontal){
                super.currentState = 'minimizadoHorizontal';
            } else {
                super.currentState = 'maximizadoHorizontal';
            }
        }

    ]]></mx:Script>
        <mx:HBox width="100%" height="1%" >
            <mx:Text text="{this.title}" width="100%" color="white" fontSize="10" fontWeight="bold" selectable="false"
                fontStyle="italic" textAlign="center" click="doHorizontalResizePanel();" />
            <mx:Image source="@Embed(source ='images/minimizePanelSlider.png')" height="15" width="15"
                click="dispatchEvent(new Event('minimizeHorizontalSlide'));" toolTip="Minimizar panel."
                />
            <mx:Image source="@Embed(source ='images/maximizePanelSlider.png')" height="15" width="15"
                click="dispatchEvent(new Event('maximizeHorizontalSlide'));" toolTip="Maximizar panel." verticalAlign="middle" horizontalAlign="right"/>
        </mx:HBox>
        <mx:HRule width="100%"/>
    <mx:states>
        <mx:State name="minimizadoVertical">
            <mx:AddChild >

            </mx:AddChild>
        </mx:State>
        <mx:State name="maximizadoVertical" basedOn="maximizadoHorizontal">
            <mx:AddChild >

            </mx:AddChild>
        </mx:State>
        <mx:State name="minimizadoHorizontal">
            <mx:AddChild >
                <mx:Box id="minimizadoContainter" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                       
                </mx:Box>
            </mx:AddChild>
        </mx:State>
        <mx:State name="maximizadoHorizontal">
            <mx:AddChild>
                <mx:Box id="maximizadoContainter" width="100%" height="100%">
                    <mx:HBox width="100%" height="100%" >
                        <!-- backgroundColor="0x006699"-->
                        <mx:List height="100%" dataProvider="{listData}" labelField="nombre" width="40%"
                            rowCount="4" paddingLeft="10" paddingTop="0" paddingBottom="0" paddingRight="10" backgroundAlpha="0"
                            verticalAlign="middle" selectable="false" borderStyle="none"
                            itemRenderer="ar.angelDurmiente.itemRenderers.TextoItemRenderer"/>
                    </mx:HBox>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:transitions>
        <mx:Transition fromState="*" toState="maximizadoHorizontal">
            <mx:Sequence>
                <mx:Fade target="{maximizadoContainter}" alphaFrom="0" alphaTo="1" duration="2500"/>
            </mx:Sequence>
        </mx:Transition>
        <mx:Transition fromState="*" toState="minimizadoHorizontal">
            <mx:Sequence>
                <mx:Fade target="{minimizadoContainter}" alphaFrom="0" alphaTo="1" duration="2500"/>
            </mx:Sequence>
        </mx:Transition>
    </mx:transitions>
</mx:Panel>