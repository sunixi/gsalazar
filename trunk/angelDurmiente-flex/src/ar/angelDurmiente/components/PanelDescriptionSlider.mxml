<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"   
    alpha=".9" 
    headerHeight="0"
    borderThickness="0"
    backgroundColor="0x990000"
    dropShadowEnabled="true" 
    borderColor="0x003399"
    borderStyle="solid"
    color="0x990000"
    cornerRadius="20"
    currentState="minimizado"
    creationComplete="onCreationComplete();"
>
	<mx:Metadata> 
		/** Evento ejecutado para poder minimizar el panel mediante transiciones y estados del objeto contenedor. */
		[Event(name="minimizeSlide", type="flash.events.Event")]
		/** Evento ejecutado para poder maximizar el panel mediante transiciones y estados del objeto contenedor. */
		[Event(name="maximizeSlide", type="flash.events.Event")]
		/** Evento ejecutado al finalizar el cambio del estado maximizado. */
		[Event(name="currentStateChangingFinish", type="flash.events.Event")]
		/** Evento ejecutado al comenzar el cambio del estado minimizado. */
		[Event(name="currentStateChangingBegin", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Style>

	</mx:Style>
    <mx:Script><![CDATA[
    	import mx.containers.HBox;
    	import mx.states.AddChild;
    	import mx.states.State;
    	import mx.core.UIComponent;
    	import mx.collections.IList;
    	import mx.collections.ArrayCollection;
    	import mx.managers.ToolTipManager;

        [Bindable]
        public var bodyText:String = "";
        
        [Bindable]
        public var listData:IList;
        
        [Bindable]
        public var minimizeClass:Class;
        
        [Bindable]
        private var uiMinimizeComponent:UIComponent;
        
        [Bindable]
        private var minimize:Boolean = true;
 
		private function onCreationComplete():void {
			this.initializeMinimizeState();
			this.addEventListener("currentStateChangingBegin", onCurrentStateChangingBegin);
			this.addEventListener("currentStateChangingFinish", onCurrentStateChangingFinish);
		}
		
		private function initializeMinimizeState():void {
			if(minimizeClass != null){
				var uiComponent:UIComponent = UIComponent(new ClassFactory(minimizeClass).newInstance());
				var minimizeState:State = this.getState('minimizado');
				uiComponent.height = minimizadoContainter.height - 5;
				uiComponent.width = minimizadoContainter.width - 5;
				uiMinimizeComponent = uiComponent;
				minimizadoContainter.addChild(uiComponent);
			}
		}
		
		private function getState(stateName:String):State {
			for each(var s:State in super.states){
				if(s.name.toUpperCase() == stateName.toUpperCase()){
					return s;
				}
			}
			return null;
		}
		
		private function maximizePanel():void {
			minimize = false;
			dispatchEvent(new Event("maximizeSlide"));
		}
		
		private function minimizePanel():void {
			minimize = true;
			dispatchEvent(new Event("minimizeSlide"));
		}
		
		/**
		 * Miminiza el panel solamente si no esta minimizado. Esto se verifica ya que si no se ejecutarÃ­an las transiciones, y
		 * no es la idea.
		 * 
		 */
		public function doMinimize():void {
			if(!this.minimize){
				this.minimizePanel();
			}
		}
		
		public function doHorizontalMinimize():void {
			if(!this.minimize){
				this.minimizePanel();
			}
		}
		
		/**
		 * Realiza un resize del panel dependiendo si el panel esta maximizado, o minimizado.
		 * En caso de estas minimizado, lo maximiza, y en caso de estar maximizado, lo minimiza.
		 * 
		 */
		private function doResizePanel():void {
			if(minimize){
				this.maximizePanel();
			} else {
				this.minimizePanel();
			}
		}
		
		private function onCurrentStateChangingBegin(event:Event):void{
			if(this.minimize){
				super.currentState = 'minimizado';
			} else {
				super.currentState = 'maximizado';
			}
		}
		
		private function onCurrentStateChangingFinish(event:Event):void{
			if(this.minimize){
				super.currentState = 'minimizado';
			} else {
				super.currentState = 'maximizado';
			}
		}

    ]]></mx:Script>
	    <mx:HBox width="100%" height="1%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
	    	<mx:Text text="{this.title}" width="90%" color="white" fontSize="10" selectable="false"
	    		textAlign="center" click="doResizePanel();" paddingLeft="1" paddingRight="1"/>
	    	<mx:Image source="@Embed(source ='images/minimizePanelSlider.png')" height="20" width="20"
				click="dispatchEvent(new Event('minimizeSlide'));" toolTip="Minimizar panel."
				trustContent="true"
				/>
	    	<mx:Image source="@Embed(source ='images/maximizePanelSlider.png')" height="20" width="20"
				click="dispatchEvent(new Event('maximizeSlide'));" toolTip="Maximizar panel."
				verticalAlign="middle" horizontalAlign="right"/>
		</mx:HBox>
	    <mx:HRule width="100%"/>
	<mx:states>
		<mx:State name="minimizadoVertical">
			<mx:AddChild >

			</mx:AddChild>
		</mx:State>
		<mx:State name="minimizado">
			<mx:AddChild >
				<mx:Box id="minimizadoContainter" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
						
				</mx:Box>
			</mx:AddChild>
		</mx:State>
		<mx:State name="maximizado">
			<mx:AddChild>
				<mx:Box id="maximizadoContainter" width="100%" height="100%">
					<mx:HBox width="100%" height="100%" >
						<!-- backgroundColor="0x006699"-->
						<mx:List height="100%" dataProvider="{listData}" labelField="nombre" width="40%"
							rowCount="4" paddingLeft="10" paddingTop="0" paddingBottom="0" paddingRight="10" backgroundAlpha="0" 
							verticalAlign="middle" selectable="false" borderStyle="none"
							itemRenderer="ar.angelDurmiente.itemRenderers.TextoAdvancedItemRenderer"/>
					</mx:HBox>
				</mx:Box>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="maximizado">
			<mx:Sequence>
				<mx:Fade target="{maximizadoContainter}" alphaFrom="0" alphaTo="1" duration="2500"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="minimizado">
			<mx:Sequence>
				<mx:Fade target="{minimizadoContainter}" alphaFrom="0" alphaTo="1" duration="2500"/>
			</mx:Sequence>
		</mx:Transition>
	</mx:transitions>
</mx:Panel>
