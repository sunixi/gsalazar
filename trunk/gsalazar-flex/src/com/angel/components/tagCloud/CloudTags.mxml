<?xml version="1.0" encoding="utf-8"?>
<mx:Box 
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	horizontalAlign="center"
	creationComplete="init()"
	verticalAlign="top">
	<mx:Metadata>
	    [Event(name="clickTagSearch", type="ar.com.gsalazar.events.ClickTagSearchEvent")]
	</mx:Metadata>
	<mx:Style>
		.tagsCloudStyle {
			borderStyle: solid;
			borderColor: #FFFFFF;
			borderThickness: 4;
			roundedBottomCorners: true;
			cornerRadius: 15;
			headerHeight: 28;
			backgroundAlpha: 1;
			dropShadowEnabled: false;
			shadowDirection: center;				
		}
	</mx:Style>
	
	<mx:Script>
	<![CDATA[
		import mx.controls.TileList;
		import ar.com.gsalazar.events.ClickTagSearchEvent;
		import com.angel.components.tagCloud.strategyView.DefaultStrategyView;
		import com.angel.components.tagCloud.strategyView.StrategyView;
		import com.angel.locator.ServiceLocator;
		import mx.collections.SortField;
		import mx.controls.LinkButton;
		import mx.controls.Label;
		import com.angel.thirds.components.hillelcoren.utils.ArrayCollectionUtils;
		import mx.collections.Sort;
		import mx.utils.ArrayUtil;
		import mx.containers.HBox;
		import mx.controls.Alert;
		import mx.events.ValidationResultEvent;
		import mx.validators.Validator;
		import mx.collections.ArrayCollection;
		import mx.collections.IList;
		
		[Bindable]
		private var _tagSearchContainer:TagSearchContainer;
		[Bindable]
		private var tagsSearch:IList;
		[Bindable]
		public var tagsPerRow:Number = 4;
		[Bindable]
		public var rowCount:Number = 4;
		[Bindable]
		public var maxTags:Number;
		[Bindable]
		public var color:String = "white";
		[Bindable]
		public var strategyView:StrategyView = new DefaultStrategyView();
		
		
		public function init():void {
			tagsSearch = new ArrayCollection();
		}
		
		public function get tagSearchContainer():TagSearchContainer{
			return _tagSearchContainer;
		}
		
		public function set tagSearchContainer(tagSearchContainer:TagSearchContainer):void{
			_tagSearchContainer = tagSearchContainer;
			var currentSize:Number = 0;
			for each(var ts:TagSearch in tagSearchContainer.tagsSearchs){
				if(currentSize <= maxTags){
					tagsSearch.addItem(ts);
				}
				currentSize++;
			}
		}

		internal function calculateOccurences(data:Object):Number {
			var occurences:Number = data.occurrences / tagSearchContainer.totalOcurrencias;
			return Math.ceil(occurences);
		}
		
		private function itemClickHandler(event:Event):void {
			var tileList:TileList = event.target as TileList;
			var tagSearch:TagSearch = TagSearch(tileList.selectedItem);
			super.dispatchEvent(new ClickTagSearchEvent("clickTagSearch", tagSearch));
		}
		
		internal function tagSearchFontSize(data:Object):Number{
			return this.strategyView.fontSize(TagSearch(data), tagSearchContainer.totalOcurrencias);
		}
		internal function tagSearchColor(data:Object):uint{
			return this.strategyView.fontColor(TagSearch(data), tagSearchContainer.totalOcurrencias);
		}
		
		private function onCreationCompleteCloudTagSearchList(event:Event):void {
			cloudTagSearchList.columnWidth = Math.ceil(cloudTagSearchList.width / tagsPerRow) + 10;
		}
	]]>
	</mx:Script>
	<mx:TileList id="cloudTagSearchList" dataProvider="{tagsSearch}"  itemClick="itemClickHandler(event);"
		columnCount="{tagsPerRow}" backgroundAlpha="0" rowCount="{rowCount}" cornerRadius="15" 
		verticalAlign="middle" selectable="true" wordWrap="true" rowHeight="30" borderThickness="2"
		creationComplete="onCreationCompleteCloudTagSearchList(event);" >
		<mx:itemRenderer>
			<mx:Component>
				<mx:Label width="{data.label.length * 21}" height="5"  text="{data.label}" data="{data}" 
					toolTip="{data.label}: {data.description} ( {outerDocument.calculateOccurences(data)} occurencias)."
					fontSize="{outerDocument.tagSearchFontSize(data) + 2}"
					textAlign="center" 
					color="{outerDocument.tagSearchColor(data)}"/>
			</mx:Component>
		</mx:itemRenderer>
	</mx:TileList>
</mx:Box>